generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  eventsCreated Event[]
  attendances   Attendance[]
  reviews       Review[]
  followers     Follow[]  @relation("UserFollows")
  following     Follow[]  @relation("UserFollowing")
  blockedBy     Block[]   @relation("UserBlocked")
  blocking      Block[]   @relation("UserBlocks")
  reportsMade   Report[]  @relation("UserReportsMade")
  reportsReceived Report[] @relation("UserReportsReceived")
  chatRooms     ChatRoom[]
  messages      Message[]
  notifications Notification[]
  role          Role      @default(USER)
}

enum Role {
  USER
  ORGANIZER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String?
  startAt     DateTime
  endAt       DateTime
  location    String

  locationGeo Unsupported("geography(Point,4326)")?
  price       Float
  capacity    Int
  tags        String[]
  image       String?
  status      EventStatus @default(UPCOMING)
  creatorId   String
  creator     User        @relation(fields: [creatorId], references: [id])
  attendances Attendance[]
  reviews     Review[]
  chatRoom    ChatRoom?

  @@index([creatorId])
}

enum EventStatus {
  UPCOMING
  FULL
  CANCELLED
  PAST
}

model Attendance {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  rating    Int
  comment   String?
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  follower    User     @relation("UserFollows", fields: [followerId], references: [id])
  following   User     @relation("UserFollowing", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id        String   @id @default(cuid())
  blockerId String
  blockedId String
  blocker   User     @relation("UserBlocks", fields: [blockerId], references: [id])
  blocked   User     @relation("UserBlocked", fields: [blockedId], references: [id])
  createdAt DateTime @default(now())

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}

model Report {
  id          String   @id @default(cuid())
  reporterId  String
  reportedId  String
  reason      String
  userReported User    @relation("UserReportsReceived", fields: [reportedId], references: [id])
  userReporter User    @relation("UserReportsMade", fields: [reporterId], references: [id])
  createdAt   DateTime @default(now())

  @@index([reporterId])
  @@index([reportedId])
}

model ChatRoom {
  id        String    @id @default(cuid())
  name      String?
  isGroup   Boolean   @default(false)
  messages  Message[]
  users     User[]
  eventId   String?   @unique
  event     Event?    @relation(fields: [eventId], references: [id])
  createdAt DateTime  @default(now())
}

model Message {
  id         String   @id @default(cuid())
  chatRoomId String
  senderId   String
  content    String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  sender     User     @relation(fields: [senderId], references: [id])
  createdAt  DateTime @default(now())

  @@index([chatRoomId])
  @@index([senderId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId])
}


